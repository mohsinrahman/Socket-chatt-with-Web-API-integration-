"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var throttle_debounce_1 = require("throttle-debounce");
var session_1 = require("./session");
var util_1 = require("./util");
var js_util_1 = require("@giphy/js-util");
var send_pingback_1 = require("./send-pingback");
var queuedPingbacks = {};
var loggedInUserId = '';
function fetchPingbackRequest() {
    js_util_1.forEach(queuedPingbacks, function (actionMap, pingbackType) {
        if (actionMap) {
            js_util_1.forEach(actionMap, function (action, responseId) {
                // if there are no actions lined up inside this pingbackType do nothing
                if (action.length) {
                    var session = session_1.createSession(pingbackType, action, responseId, loggedInUserId);
                    send_pingback_1.sendPingback(session);
                    // empty this specific batch
                    actionMap[responseId] = [];
                }
            });
        }
    });
}
var debouncedPingbackEvent = throttle_debounce_1.debounce(1000, fetchPingbackRequest);
var pingback = function (_a) {
    var gif = _a.gif, user = _a.user, responseId = _a.responseId, pingbackType = _a.type, actionType = _a.actionType, position = _a.position, attributes = _a.attributes;
    // not all endpoints provide a response_id
    if (!responseId) {
        js_util_1.Logger.debug("Pingback aborted for " + gif.id + ", no responseId");
        return;
    }
    var id = gif.id, _b = gif.bottle_data, bottle_data = _b === void 0 ? {} : _b;
    var tid = bottle_data.tid;
    // save the user id for whenever create session is invoked
    loggedInUserId = user && user.id ? String(user.id) : loggedInUserId;
    // the queue doesn't exist for this pingbackType yet so create it
    if (!queuedPingbacks[pingbackType])
        queuedPingbacks[pingbackType] = {};
    // a map of actions based on pingback type
    var actionMap = queuedPingbacks[pingbackType]; // we just created it so ! is ok
    // create the searchRepsonseId queue
    if (!actionMap[responseId])
        actionMap[responseId] = [];
    // add the action
    actionMap[responseId].push(util_1.getAction(actionType, String(id), tid, position, attributes));
    // if there's a tid, skip the queue
    tid ? fetchPingbackRequest() : debouncedPingbackEvent();
};
exports.default = pingback;
//# sourceMappingURL=pingback.js.map